#+TITLE: Emacs 配置文件
#+AUTHOR: Vietor Liu
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview
#+OPTIONS: num:nil

* 项目目标

我本人自2013年就开始使用了Emacs，直至今时已经自己迭代了很多版本，主要参考[[https://github.com/purcell/emacs.d][Steve Purcell]]的配置。
国人使用Emacs的并不常见，猜测是因为Emacs入门麻烦；为了启发的Emacs初学者，创建这个项目以供参考用。

** 试用方法

将这个项目直接clone到个人主目录后，打开Emacs即可。

#+BEGIN_SRC bash
  git clone https://github.com/vietor/dot-emacs.d.git ~/.emacs.d
#+END_SRC

* 正式配置

** 包管理

不要质疑use-package，它已经进入Emacs内部了。

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (dolist (archive '(("gnu"    . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                     ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                     ("melpa"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
    (unless (assoc (car archive) package-archives)
      (add-to-list 'package-archives archive t)))

  (setq package-user-dir
        (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
                          user-emacs-directory))

  (unless (bound-and-true-p package--initialized)
    (setq package-check-signature nil
          package-enable-at-startup nil)
    (package-initialize))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

#+END_SRC


** 项目管理

Emacs自身已经包含了*project*来进行简单项目管理，但我个人喜欢*多开*就写了个*aproject*，尽量让每个项目有独立的环境。

#+BEGIN_SRC emacs-lisp
  (use-package aproject
    :ensure t
    :demand t
    :bind ("C-x p" . aproject-change-project)
    :config
    (setq desktop-restore-eager 5)
    (setq aproject-plugin-environ t)
    (add-to-list 'vc-directory-exclusion-list aproject-dirname))

  (when window-system
    (defun open-new-emacs()
      "Open a new Emacs process."
      (interactive)
      (cond
       ((eq system-type 'darwin)
        (shell-command "open -n -a Emacs.app"))
       ((eq system-type 'windows-nt)
        (w32-shell-execute "open" (concat (file-name-directory (car command-line-args)) "runemacs.exe")))
       (t (call-process-shell-command (concat (car command-line-args) " & disown")))))

    (bind-key "M-g z" 'open-new-emacs))
#+END_SRC

** 简化界面

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tooltip-mode)
    (tooltip-mode -1))
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (setq default-frame-alist '((vertical-scroll-bars . nil)
                              (tool-bar-lines . 0)
                              (menu-bar-lines . 0)
                              (fullscreen . nil)))
  (let ((no-border '(internal-border-width . 0)))
    (add-to-list 'default-frame-alist no-border)
    (add-to-list 'initial-frame-alist no-border))
#+END_SRC

*** 优化窗口显示

#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil
        use-file-dialog nil)

  (when window-system
    (mouse-wheel-mode t)
    (setq mouse-wheel-scroll-amount '(1
                                      ((shift) . 5)
                                      ((control))))
    ;; disable ugly text-scale
    (defun mouse-wheel-text-scale (event)
      (interactive (list last-input-event))))

  (when (fboundp 'toggle-frame-fullscreen)
    (bind-key "C-<f10>" 'toggle-frame-fullscreen))

  (when (fboundp 'pixel-scroll-precision-mode)
    (pixel-scroll-precision-mode))

#+END_SRC
