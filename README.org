#+TITLE: Emacs 配置文件
#+AUTHOR: Vietor Liu
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview
#+OPTIONS: num:nil

* 项目目标

我本人自2013年就开始使用了Emacs，直至今时已经自己迭代了很多版本，主要参考[[https://github.com/purcell/emacs.d][Steve Purcell]]的配置。
国人使用Emacs的并不常见，猜测是因为Emacs入门麻烦；为了启发的Emacs初学者，创建这个项目以供参考用。

** 试用方法

将这个项目直接clone到个人主目录后，打开Emacs即可。

#+BEGIN_SRC bash
  git clone https://github.com/vietor/dot-emacs.d.git ~/.emacs.d
#+END_SRC

* 正式配置

** 包管理

不要质疑use-package，它已经进入Emacs内部了。

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (dolist (archive '(("gnu"    . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                     ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                     ("melpa"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
    (unless (assoc (car archive) package-archives)
      (add-to-list 'package-archives archive t)))

  (setq package-user-dir
        (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
                          user-emacs-directory))

  (unless (bound-and-true-p package--initialized)
    (setq package-check-signature nil
          package-enable-at-startup nil)
    (package-initialize))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

#+END_SRC


** 项目管理

Emacs自身已经包含了*project*来进行简单项目管理，但我个人喜欢*多开*就写了个*aproject*，尽量让每个项目有独立的环境。

#+BEGIN_SRC emacs-lisp
  (use-package aproject
    :ensure t
    :demand t
    :bind ("C-x p" . aproject-change-project)
    :config
    (setq desktop-restore-eager 5)
    (setq aproject-plugin-environ t)
    (add-to-list 'vc-directory-exclusion-list aproject-dirname))

  (when window-system
    (defun open-new-emacs()
      "Open a new Emacs process."
      (interactive)
      (cond
       ((eq system-type 'darwin)
        (shell-command "open -n -a Emacs.app"))
       ((eq system-type 'windows-nt)
        (w32-shell-execute "open" (concat (file-name-directory (car command-line-args)) "runemacs.exe")))
       (t (call-process-shell-command (concat (car command-line-args) " & disown")))))

    (global-set-key (kbd "M-g z") 'open-new-emacs))
#+END_SRC

** 界面优化

清理界面元素

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tooltip-mode)
    (tooltip-mode -1))
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (setq default-frame-alist '((vertical-scroll-bars . nil)
                              (tool-bar-lines . 0)
                              (menu-bar-lines . 0)
                              (fullscreen . nil)))
  (let ((no-border '(internal-border-width . 0)))
    (add-to-list 'default-frame-alist no-border)
    (add-to-list 'initial-frame-alist no-border))

  (setq use-dialog-box nil
        use-file-dialog nil)
  (setq inhibit-startup-screen t
        initial-scratch-message "")
#+END_SRC

优化Windows系统性能

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq w32-pipe-read-delay 0
          w32-pipe-buffer-size (* 64 1024)
          w32-get-true-file-attributes nil
          inhibit-compacting-font-caches t))
  (setq-default bidi-display-reordering nil)
#+END_SRC

优化MacOSX系统支持

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq ns-pop-up-frames nil
          mac-command-modifier 'meta
          mac-option-modifier 'none)
    (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
#+END_SRC

使用界面主题

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :when window-system
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-dracula t))
#+END_SRC

加入快捷键提示

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :hook (after-init . which-key-mode)
  :config
  (setq-default which-key-idle-delay 1.5))
#+END_SRC

禁用兼容差的快捷键

#+BEGIN_SRC emacs-lisp
  (dolist (key '("<f1>" "<f2>" "<f3>" "<f4>" "<f5>" "<f6>"
                 "<f7>" "<f8>" "<f9>" "<f10>" "<f11>" "<f12>"
                 "C-z" "C-SPC" "C-x C-z" "C-x C-e"))
    (global-unset-key (kbd key)))
#+END_SRC

禁用默认的文件备份

#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil
        make-backup-files nil
        auto-save-default nil
        auto-save-list-file-prefix nil)
#+END_SRC

禁用关闭时的确认

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-processes nil)
#+END_SRC

简化确认时的按键

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

去掉光标闪烁和铃声

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'blink-cursor-mode)
    (blink-cursor-mode 0))
  (setq visible-bell nil
        ring-bell-function 'ignore)
#+END_SRC

优化鼠标操作支持

#+BEGIN_SRC emacs-lisp
  (setq-default mouse-yank-at-point t)
  (when window-system
    (mouse-wheel-mode t)
    (setq mouse-wheel-scroll-amount '(1
                                      ((shift) . 5)
                                      ((control))))

    (defun mouse-wheel-text-scale (event)
      (interactive (list last-input-event))))
#+END_SRC

优化屏幕滚动支持

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-preserve-screen-position 'always)
  (when (fboundp 'pixel-scroll-precision-mode)
    (pixel-scroll-precision-mode))
#+END_SRC

启用大小写快捷键

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

初始文档为文本格式

#+BEGIN_SRC emacs-lisp
  (setq-default major-mode 'text-mode)
  (setq initial-major-mode 'text-mode)
#+END_SRC

优化Tab和缩进支持

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4
                standard-indent 4
                indent-tabs-mode nil)
  (add-hook 'c-mode-common-hook
            (lambda()
              (when indent-tabs-mode (setq tab-width c-basic-offset))))
  (add-hook 'after-init-hook 'electric-indent-mode)
#+END_SRC

优化文本选择支持

#+BEGIN_SRC emacs-lisp
  (cua-selection-mode t)
  (setq-default shift-select-mode nil)
  (add-hook 'after-init-hook 'delete-selection-mode)
#+END_SRC

显示光标所在的列号

#+BEGIN_SRC emacs-lisp
  (setq-default column-number-mode t
                size-indication-mode t)
#+END_SRC

显示代码行号

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'display-line-numbers-mode)
    (setq-default display-line-numbers-width 3)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode))
#+END_SRC

禁用自动折行

#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines nil
                truncate-partial-width-windows nil)
#+END_SRC

高亮显示搜索值

#+BEGIN_SRC emacs-lisp
  (setq-default case-fold-search t)
#+END_SRC

高亮显示括号对

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'show-paren-mode)
  (when (fboundp 'electric-pair-mode)
    (add-hook 'after-init-hook 'electric-pair-mode))
#+END_SRC

优化标记操作

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-.") 'set-mark-command)
  (global-set-key (kdb "C-x C-.") 'pop-global-mark)

  (setq-default set-mark-command-repeat-pop t)
  (add-hook 'after-init-hook 'transient-mark-mode)
#+END_SRC

优化显示末尾空白

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace nil)
  (dolist (hook '(prog-mode-hook text-mode-hook conf-mode-hook))
    (add-hook hook (lambda () (setq show-trailing-whitespace t))))
#+END_SRC

显眼文尾空行

#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines t)
#+END_SRC

禁用双空格的句尾

#+BEGIN_SRC emacs-lisp
  (setq-default sentence-end-double-space nil)
#+END_SRC
